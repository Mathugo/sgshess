{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "orig_nbformat": 4,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.7.1 64-bit"
  },
  "interpreter": {
   "hash": "dbb7385ac3431fa69875baf2702cf95a14f5d63f6dcb5d73516f07a3bb8a845f"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "from selenium.webdriver.common.by import By\n",
    "\n",
    "import random\n",
    "from time import sleep\n",
    "\n",
    "USERNAME = 'hugomat'\n",
    "PASSWORD = 'qf5vw89fz14ap04' \n",
    "\n",
    "USERNAME_nathan = 'qowax'\n",
    "PASSWORD_nathan = 'Piggybank25942_'\n",
    "\n",
    "n_one_room = 1\n",
    "n_dubbel_room = 2\n",
    "n_two_room = 2\n",
    "n_three_room = 1\n",
    "\n",
    "max_price_one_room = 5500\n",
    "\n",
    "min_surface_one_room = 21\n",
    "min_surface_two_room = 45\n",
    "min_surface_three_room = 50\n",
    "date_arrival = \"2021-09-01\"\n",
    "\n",
    "# SIMPLE ROUTINE LOGIN -> VACANT OBJECTS -> FILTER -> LIST VACANT OBJECTS\n",
    "\n",
    "\n",
    "class browsing_bot():\n",
    "    def __init__(self, username, password):\n",
    "        self.BASE_URL = 'https://www.sgs.se/Mina-sidor/Login?return=https://www.sgs.se/mina-sidor/mina-%C3%A4renden?sc_lang=en'\n",
    "        self.VACANT_OBJECT_URL = 'https://www.sgs.se/mina-sidor/lediga-objekt?sc_lang=en'\n",
    "        \n",
    "        self.username = username\n",
    "        self.password = password\n",
    "        \n",
    "        self.chromedriver = 'chromedriver.exe'\n",
    "        self.browser = webdriver.Chrome(self.chromedriver)\n",
    "        self.browser.set_window_size(900,1080)\n",
    "    \n",
    "    def login(self):\n",
    "        self.browser.get(self.BASE_URL)\n",
    "        username = self.browser.find_element_by_name(\"User\")\n",
    "        username.send_keys(self.username)\n",
    "\n",
    "        password = self.browser.find_element_by_name(\"Password\")\n",
    "        password.send_keys(self.password)\n",
    "\n",
    "        password.send_keys(Keys.RETURN)\n",
    "        sleep(3)\n",
    "        self.browser.get(self.VACANT_OBJECT_URL)\n",
    "\n",
    "    # FILTER\n",
    "    def my_filter(self):\n",
    "        sleep(5)\n",
    "        # switch to filter frame\n",
    "        filter_frame = self.browser.find_element_by_id(\"momentum\")\n",
    "        self.browser.switch_to_frame(filter_frame)\n",
    "\n",
    "        # display toggle btn\n",
    "        toggle_search_area = self.browser.find_element_by_id(\"toggle-seekarea\")\n",
    "        toggle_search_area.send_keys(Keys.ENTER)\n",
    "\n",
    "        sleep(2)\n",
    "\n",
    "    def close(self):\n",
    "        sleep(1000)\n",
    "        self.browser.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def send_mail(nb_accomodation, msg):\n",
    "    import smtplib, ssl\n",
    "\n",
    "    port = 587  # For starttls\n",
    "    smtp_server = \"smtp.gmail.com\"\n",
    "    sender_email = \"hugo.mathh@gmail.com\"\n",
    "    receiver_email = \"hugo.mathh@gmail.com\"\n",
    "    receiver_email_2 = \"nathan.haudot@outlook.fr\"\n",
    "\n",
    "    password = \"qf5vw89fz14ap04\"\n",
    "    message = \"Subject:[SGS UPDATE INFO]\\nThe number of accomodation has changed.\\n\"+str(nb_accomodation)+ \" filtered accomodation to rent\"+\"\\n\\n\\nThis message is sent from Python.\\n\"+str(msg)\n",
    "    context = ssl.create_default_context()\n",
    "    with smtplib.SMTP(smtp_server, port) as server:\n",
    "        server.ehlo()  # Can be omitted\n",
    "        server.starttls(context=context)\n",
    "        server.ehlo()  # Can be omitted\n",
    "        server.login(sender_email, password)\n",
    "        server.sendmail(sender_email, receiver_email, message)\n",
    "        server.sendmail(sender_email, receiver_email_2, message)\n",
    "        print(\"Mail sent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_object(surface, price, date, number_of_room, url):\n",
    "    global date_arrival, n_one_room, n_dubbel_room, n_two_room , n_three_room,max_price_one_room, min_surface_one_room, min_surface_two_room, min_surface_three_room \n",
    "    \n",
    "    date = date.text.split(\" \")[2]\n",
    "    surface = surface.text.split(\" \")[0]\n",
    "    number_of_room = int(number_of_room.text.split(\" \")[0])\n",
    "    price = price.text.split(\" \")\n",
    "    price = int(price[1]+price[2])\n",
    "\n",
    "    print(\"Begining date {} surface {} number room {} price {}\".format(date, surface, number_of_room, price))\n",
    "   \n",
    "    if (int(date.split(\"-\")[1]) == int(date_arrival.split(\"-\")[1])): # date != date_arrival\n",
    "        if (number_of_room == 1):\n",
    "            if ( int(surface) >= min_surface_one_room):\n",
    "                if (price < max_price_one_room):\n",
    "                    return True, date, price, int(surface), number_of_room, url\n",
    "        elif (number_of_room == 2):\n",
    "            if (int(surface) >= min_surface_two_room):\n",
    "                return True, date, price, int(surface), number_of_room, url\n",
    "        elif (number_of_room == 3):\n",
    "            if (int(surface) >= min_surface_three_room):\n",
    "                return True, date, price, int(surface), number_of_room, url\n",
    "    return False, date, price, int(surface), number_of_room, url"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Routine:\n",
    "    def __init__(self):\n",
    "        self.browser = browsing_bot(USERNAME_nathan, PASSWORD_nathan)\n",
    "        self.number_of_accomodation = 0\n",
    "    def login(self):\n",
    "        self.browser.login()\n",
    "\n",
    "    def filter_search_sgs(self):\n",
    "        filter_frame = self.browser.browser.find_element_by_id(\"momentum\")\n",
    "        self.browser.browser.switch_to_frame(filter_frame)\n",
    "        sleep(0.5)\n",
    "        toggle_search_area = self.browser.browser.find_element_by_id(\"toggle-seekarea\")\n",
    "        toggle_search_area.send_keys(Keys.ENTER)\n",
    "        sleep(0.5)\n",
    "        # FILTER CENTER\n",
    "        center_btn = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[2]/div[1]/div[2]/ul/li/ul/li[1]/a/ins[1]\").click()\n",
    "        # FILTER NORR\n",
    "        norr_expand_btn = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[2]/div[1]/div[2]/ul/li/ul/li[4]/ins\").click()\n",
    "        lindholmsallen = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[2]/div[1]/div[2]/ul/li/ul/li[4]/ul/li[3]/a/ins[1]\").click()\n",
    "        plejaden = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[2]/div[1]/div[2]/ul/li/ul/li[4]/ul/li[4]/a/ins[1]\").click()\n",
    "        centrala_hisingen = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[2]/div[1]/div[2]/ul/li/ul/li[4]/ul/li[7]/a/ins[1]\").click()\n",
    "            # FILTER RUM\n",
    "        alla = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[1]/div[4]/span/div/button\").click()\n",
    "        # 1 rum \n",
    "        one_rum = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[1]/div[4]/span/div/ul/li[2]/a/label/input\").click()\n",
    "        # 2 rum\n",
    "        two_rum = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[1]/div[4]/span/div/ul/li[3]/a/label\").click()\n",
    "        # 3 rum\n",
    "        three_rum = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[1]/div[4]/span/div/ul/li[4]/a/label\").click()\n",
    "        # dubbelrum\n",
    "        dubbelrum = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[1]/div[4]/span/div/ul/li[9]/a/label\").click()\n",
    "\n",
    "    def search_and_list_sgs(self):\n",
    "        # SEARCH\n",
    "        self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[2]/div/div[1]/div[4]/div/div/a[3]\").click()\n",
    "        # vew all vacant objects in one page \n",
    "        sleep(0.5)\n",
    "        view_all = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[4]/div[2]/div[2]/div/select\").click()\n",
    "        sleep(0.5)\n",
    "        put_all_vacant = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[4]/div[2]/div[2]/div/select/option[5]\").click()\n",
    "    \n",
    "    def do_filter_object_sgs(self):\n",
    "        msg_mail_accomodation = []\n",
    "        # GET LIST OF VACANT OBJECT IN ONE PAGE\n",
    "        list_vacant_object_one = self.browser.browser.find_element_by_xpath(\"/html/body/div[2]/form/div[3]/div[4]/div[1]/div[2]/div[4]/div[3]/div[1]/table/tbody\")\n",
    "        list_vacant = list_vacant_object_one.find_elements(By.TAG_NAME, \"tr\")\n",
    "        print(\"Currently {} vacant objects in our filters\".format(len(list_vacant)))\n",
    "\n",
    "                # Print filtered object\n",
    "        vacant_object = []\n",
    "        filtered_object = []\n",
    "\n",
    "        random.shuffle(list_vacant)\n",
    "        # list of object\n",
    "        sleep(1)\n",
    "        for i in range(1, len(list_vacant)+1):\n",
    "            date = \"//*[@id='search-container']/table/tbody/tr[\"+str(i)+\"]/td[3]/div[6]\"\n",
    "            price = \"//*[@id='search-container']/table/tbody/tr[\"+str(i)+\"]/td[3]/div[5]\"\n",
    "            surface = \"//*[@id='search-container']/table/tbody/tr[\"+str(i)+\"]/td[3]/div[4]\"\n",
    "            number_of_room = \"//*[@id='search-container']/table/tbody/tr[\"+str(i)+\"]/td[3]/div[3]\"\n",
    "            url_apply = \"//*[@id='search-container']/table/tbody/tr[\"+str(i)+\"]/td[3]/a[1]\"\n",
    "            \n",
    "            begining_date_elemm = self.browser.browser.find_element_by_xpath(date)\n",
    "            price_elem = self.browser.browser.find_element_by_xpath(price)\n",
    "            surface_elem = self.browser.browser.find_element_by_xpath(surface)\n",
    "            number_of_room = self.browser.browser.find_element_by_xpath(number_of_room)\n",
    "            url_apply = self.browser.browser.find_element_by_xpath(url_apply)\n",
    "\n",
    "            vacant_object.append([begining_date_elemm, price_elem, surface_elem, number_of_room, url_apply])\n",
    "\n",
    "        for date, price, surface, number_of_room, url_apply in vacant_object:\n",
    "            filtered, date, price, surface, number_of_room, url = filter_object(surface_elem, price, begining_date_elemm, number_of_room, url_apply)\n",
    "            if (filtered):\n",
    "                print(\"\\n\\n\")\n",
    "                filtered_object.append([date, price, surface, number_of_room, url])\n",
    "                msg = \"Filtered :Begining date {} surface {} number room {} price {}\\n\".format(date, surface, number_of_room, price)\n",
    "                print(msg)\n",
    "                msg_mail_accomodation.append(msg)\n",
    "                print(\"\\n\\n\")\n",
    "        print(\"{} Filtered accomodation\".format(len(filtered_object)))\n",
    "        if (self.number_of_accomodation != len(list_vacant)):\n",
    "            self.number_of_accomodation = len(list_vacant)\n",
    "            send_mail(len(filtered_object), msg_mail_accomodation)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stderr",
     "text": [
      "C:\\Users\\hugom\\AppData\\Roaming\\Python\\Python37\\site-packages\\ipykernel_launcher.py:10: DeprecationWarning: use driver.switch_to.frame instead\n  # Remove the CWD from sys.path while we load stuff.\n"
     ]
    }
   ],
   "source": [
    "### BASIC ROUTINE\n",
    "routine_1 = Routine()\n",
    "routine_1.login()\n",
    "routine_1.filter_search_sgs()\n",
    "routine_1.search_and_list_sgs()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "[*] Starting search ..\n",
      "Currently 31 vacant objects in our filters\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 3540\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 3540\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 3533\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 3533\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 3540\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 3540\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 3538\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 3538\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 3534\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 3534\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 5618\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 7153\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 6177\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 6980\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4955\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4955\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 5167\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 5167\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 6324\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 5877\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 5877\n",
      "Begining date 2021-09-01 surface 34 number room 3 price 8902\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4946\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4946\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 2 price 6584\n",
      "Begining date 2021-09-01 surface 34 number room 3 price 8902\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4879\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4879\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 5436\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 5436\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4597\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4597\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4675\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4675\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 3 price 7503\n",
      "Begining date 2021-09-01 surface 34 number room 3 price 7503\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4689\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4689\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 3 price 9094\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4689\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4689\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4506\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4506\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4673\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4673\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 4506\n",
      "\n",
      "\n",
      "\n",
      "Filtered :Begining date 2021-09-01 surface 34 number room 1 price 4506\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Begining date 2021-09-01 surface 34 number room 1 price 5780\n",
      "17 Filtered accomodation\n"
     ]
    },
    {
     "output_type": "error",
     "ename": "AttributeError",
     "evalue": "'Routine' object has no attribute 'number_of_accomodation'",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_2620/431508059.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"[*] Starting search ..\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m     \u001b[0mroutine_1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdo_filter_object_sgs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"[*] Done\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m     \u001b[0msleep\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m60\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_2620/1449504416.py\u001b[0m in \u001b[0;36mdo_filter_object_sgs\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     79\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"\\n\\n\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     80\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"{} Filtered accomodation\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfiltered_object\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 81\u001b[1;33m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"{} {} \"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnumber_of_accomodation\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlist_vacant\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     82\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnumber_of_accomodation\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlist_vacant\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     83\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnumber_of_accomodation\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlist_vacant\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'Routine' object has no attribute 'number_of_accomodation'"
     ]
    }
   ],
   "source": [
    "while (True):\n",
    "    print(\"[*] Starting search ..\")\n",
    "    routine_1.do_filter_object_sgs()\n",
    "    print(\"[*] Done\")\n",
    "    sleep(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}